<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>STDIM</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stdim.github.io/"/>
  <updated>2020-04-12T09:10:16.220Z</updated>
  <id>https://stdim.github.io/</id>
  
  <author>
    <name>owlcity</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ha</title>
    <link href="https://stdim.github.io/2020/04/12/canvas/"/>
    <id>https://stdim.github.io/2020/04/12/canvas/</id>
    <published>2020-04-12T09:09:31.000Z</published>
    <updated>2020-04-12T09:10:16.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="canvas-逐帧动画"><a href="#canvas-逐帧动画" class="headerlink" title="canvas 逐帧动画"></a>canvas 逐帧动画</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'opening-line'</span>);</span><br><span class="line">  canvas.width = <span class="number">150</span>;</span><br><span class="line">  canvas.height = <span class="number">150</span>;</span><br><span class="line">  <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">  <span class="keyword">var</span> picSize = <span class="number">150</span>;</span><br><span class="line">  <span class="keyword">var</span> duration = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">  image.src= canvas.getAttribute(<span class="string">'src'</span>);</span><br><span class="line">  image.addEventListener(<span class="string">'load'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height);</span><br><span class="line">      ctx.drawImage(image, index * picSize, <span class="number">0</span>, picSize, picSize, <span class="number">0</span>, <span class="number">0</span>, picSize, picSize);</span><br><span class="line">      index++;</span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">34</span>) index = <span class="number">0</span>;</span><br><span class="line">    &#125;,duration);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;canvas-逐帧动画&quot;&gt;&lt;a href=&quot;#canvas-逐帧动画&quot; class=&quot;headerlink&quot; title=&quot;canvas 逐帧动画&quot;&gt;&lt;/a&gt;canvas 逐帧动画&lt;/h1&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>EventLoop曾经的理解</title>
    <link href="https://stdim.github.io/2020/04/11/EventLoop%E6%9B%BE%E7%BB%8F%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://stdim.github.io/2020/04/11/EventLoop%E6%9B%BE%E7%BB%8F%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2020-04-11T15:08:15.251Z</published>
    <updated>2020-04-11T15:08:25.295Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Event-Loop曾经的理解"><a href="#Event-Loop曾经的理解" class="headerlink" title="Event Loop曾经的理解"></a>Event Loop曾经的理解</h2><p>首先，JS是单线程语言，也就意味着同一个时间只能做一件事，那么</p><ul><li><strong>为什么JavaScript不是多线程呢？这样还能提高效率啊</strong><blockquote><p>假定JS同时有两个线程，一个线程在某个DOM节点上编辑了内容，而另一个线程删除了这个节点，这时浏览器就很懵逼了，到底以执行哪个操作呢？</p></blockquote></li></ul><p>所以，设计者把JS设计成单线程应该就很好理解了，为了避免类似上述操作的复杂性，这一特征将来也不会变。</p><p>但是单线程有一个问题：一旦这个线程被阻塞就无法继续工作了，这肯定是不行的</p><p>由于异步编程可以实现“非阻塞”的调用效果，引入异步编程自然就是顺理成章的事情了，那么</p><ul><li><strong>JS单线程如何实现异步的呢？</strong><br>今天的主咖登场——<strong>事件循环(Event Loop)</strong>，JS异步是通过的事件循环实现的，理解了Event Loop机制，就理解<br>了JS的执行机制。</li></ul><p>先来段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">console.log(1)</span><br><span class="line"></span><br><span class="line">setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">    console.log(2)</span><br><span class="line">&#125;, 0)</span><br><span class="line"></span><br><span class="line">for(let i &#x3D; 3; i &lt; 10000; i++)&#123;</span><br><span class="line">    console.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>执行结果：1 3 4 5 6 7 ... 9997 9998 9999 2</code></pre><p>setTimeout里的函数并没有立即执行，我们都知道这部分叫<strong>异步处理模块</strong>，延迟了一段时间，满足一定条件后才执行</p><p>仔细想想，我们在JS里通常把任务分为“<strong>同步任务</strong>”和“<strong>异步任务</strong>”，它们有以下的执行顺序：</p><blockquote><ol><li>判断任务是同步的还是异步的，如果是同步任务就进入主线程执行栈中，如果是异步任务就进入Event Table并注册函数，当满足触发条件后，进入Event Queue</li><li>只有等到主线程的同步任务执行完后，才会去Event Queue中查找是否有可执行的异步任务，如有，则进入主线程执行</li></ol></blockquote><p>以上两步循环执行，就是所谓的Event Loop，所以上述代码里：</p><blockquote><p>console.log(1)    是同步任务，进入主线程，立即执行<br>setTimeout    是异步任务，进入Event Table，0ms后（实际时间可能有出入，见注文）进入Event Queue，等待进入主线程<br>for 是同步任务，进入主线程，立即执行<br>所有主线程任务执行完后，setTimeout从Event Queue进入主线程执行</p></blockquote><pre><code>*注：HTML5规范规定最小延迟时间不能小于4ms，即x如果小于4，会被当做4来处理。 不过不同浏览器的实现不一样，比如，Chrome可以设置1ms，IE11/Edge是4ms</code></pre><p>这就是我之前对Event Loop的理解，但是自从看了这篇文章<a href="https://segmentfault.com/a/1190000012806637" target="_blank" rel="noopener">深入理解JS引擎的执行机制</a>颠覆了我对Event Loop认识三观，看下面的代码</p><h2 id="Event-Loop现在的理解"><a href="#Event-Loop现在的理解" class="headerlink" title="Event Loop现在的理解"></a>Event Loop现在的理解</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;start&quot;)</span><br><span class="line">setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;setTimeout&quot;)</span><br><span class="line">&#125;, 0)</span><br><span class="line">new Promise((resolve)&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;promise&quot;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(()&#x3D;&gt;&#123;</span><br><span class="line">    console.log(&quot;then&quot;)</span><br><span class="line">&#125;)</span><br><span class="line">console.log(&quot;end&quot;)</span><br></pre></td></tr></table></figure><p>尝试按照我们上面的JS执行机制去分析：</p><blockquote><p>console.log(“start”)是同步任务，进入主线程，立即执行 setTimeout是异步任务，进入Event<br>Table，满足触发条件后进入Event Queue<br><strong>new Promise是同步任务</strong>，进入主线程，立即执行<br><strong>.then是异步任务</strong>，进入Event Table，满足触发条件后进入Event Queue，排在Event Queue队尾 console.log(“end”)是同步任务，进入主线程，立即执行</p></blockquote><p>所以执行结果是：<code>start &gt; promise &gt; end &gt; setTimeout &gt; then</code></p><p><strong>But但是</strong>，亲自跑了代码结果却是：<code>start &gt; promise &gt; end &gt; then &gt; setTimeout</code></p><p>对比结果发现，难道Event Queue里面的顺序不是队列的先进先出的顺序吗？还是这块执行时有什么改变，事实就是，<strong>前面按照同步和异步任务划分的方式并不准确</strong>，那么怎么划分才是准确的呢，先看图（转自<a href="https://segmentfault.com/a/1190000011198232" target="_blank" rel="noopener">谷雨JavaScript 异步、栈、事件循环、任务队列</a>）：</p><p><img src="/img/bV2sU2" alt="图片描述"></p><p>咣咣咣～敲黑板，知识点，知识点，知识点：</p><blockquote><p>Js 中，有两类任务队列：<strong>宏任务队列</strong>（macro tasks）和<strong>微任务队列</strong>（micro tasks）</p></blockquote><p>宏任务队列可以有<strong>多个</strong>，微任务队列只有<strong>一个</strong>。那么什么任务，会分到哪个队列呢？</p><blockquote><p><strong>宏任务：script（全局任务）, setTimeout, setInterval, setImmediate, I/O, UI rendering.</strong><br><strong>微任务：process.nextTick, Promise的then或catch, Object.observer, MutationObserver.</strong></p></blockquote><p>那么结合上面的流程图和最初理解的执行机制，总结了一下更为准确的JS执行机制：</p><blockquote><ol><li><strong>取且仅取</strong>一个宏任务来执行（第一个宏任务就是script任务）。执行过程中判断是同步还是异步任务，如果是同步任务就进入主线程执行栈中，如果是异步任务就进入<strong>异步处理模块</strong>，这些异步处理模块的任务当满足触发条件后，进入<strong>任务队列</strong>，进入任务队列后，按照宏任务和微任务进行划分，划分完毕后，执行下一步。</li><li>如果微任务队列不为空，则依次取出微任务来执行，直到微任务队列为空（即<strong>当前loop</strong>所有微任务执行完），执行下一步。</li><li>进入下一轮loop或更新UI渲染。</li></ol></blockquote><p>Event Loop就是循环执行上面三步，接下来使用上面的结论分析个例子帮助理解</p><ul><li><strong>微任务里嵌套宏任务</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;第一轮&#39;);</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;                    &#x2F;&#x2F;为了便于叙述时区分，标记为 setTimeout1</span><br><span class="line">    console.log(&#39;第二轮&#39;);</span><br><span class="line">    Promise.resolve().then(() &#x3D;&gt; &#123;    &#x2F;&#x2F;为了便于叙述时区分，标记为 then1</span><br><span class="line">        console.log(&#39;A&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;                    &#x2F;&#x2F;为了便于叙述时区分，标记为 setTimeout2</span><br><span class="line">    console.log(&#39;第三轮&#39;);</span><br><span class="line">    console.log(&#39;B&#39;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve)&#x3D;&gt;&#123;              &#x2F;&#x2F;为了便于叙述时区分，标记为 Promise1</span><br><span class="line">    console.log(&quot;C&quot;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() &#x3D;&gt; &#123;                       &#x2F;&#x2F;为了便于叙述时区分，标记为 then2</span><br><span class="line">    Promise.resolve().then(() &#x3D;&gt; &#123;    &#x2F;&#x2F;为了便于叙述时区分，标记为 then3</span><br><span class="line">        console.log(&quot;D&quot;)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;            &#x2F;&#x2F;为了便于叙述时区分，标记为 setTimeout3</span><br><span class="line">            console.log(&#39;第四轮&#39;);</span><br><span class="line">            console.log(&#39;E&#39;);</span><br><span class="line">        &#125;, 0);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果：<code>第一轮 &gt; C &gt; D &gt; 第二轮 &gt; A &gt; 第三轮 &gt; B &gt; 第四轮 &gt; E</code></p><p>分析：</p><p><strong>loop1:</strong><br> <strong>第一步：</strong>首先执行全局宏任务，里面<strong>同步任务有下面两个，</strong>都立即进入主线程执行完后出栈</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.console.log(&#39;第一轮&#39;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.Promise1</span><br></pre></td></tr></table></figure><p>输出 <code>“第一轮” &gt; “C”</code></p><p><strong>异步任务有三个</strong>，分别进入相应的任务队列：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.setTimeout1，该任务按照划分标准是 宏任务</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;第二轮&#39;);</span><br><span class="line">    Promise.resolve().then(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;A&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, 0);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.setTimeout2，该任务按照划分标准是 宏任务</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;第三轮&#39;);</span><br><span class="line">    console.log(&#39;B&#39;);</span><br><span class="line">&#125;, 0);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">3.then2，该任务按照划分标准是 微任务</span><br><span class="line"></span><br><span class="line">.then(() &#x3D;&gt; &#123;</span><br><span class="line">    Promise.resolve().then(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&quot;D&quot;)</span><br><span class="line">        setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;第四轮&#39;);</span><br><span class="line">            console.log(&#39;E&#39;);</span><br><span class="line">        &#125;, 0);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>所以此时宏任务队列为： <code>setTimeout1，setTimeout2</code><br> 微任务队列为： <code>then2</code></p></blockquote><p><strong>第二步：</strong>loop1 微任务队列不为空，<code>then2</code>出队列并执行，然后这个微任务里的 <code>then3</code>继续进入微任务队列 ，<code>setTimeout3</code>进入宏任务队列队尾</p><blockquote><p>那么此时微任务队列为： <code>then3</code><br>宏任务队列为：<code>setTimeout1，setTimeout2，setTimeout3</code></p></blockquote><p>但是此时第二步并没有完，因为微任务队列只要不为空，就一直执行当前loop的微任务，所以从微任务队列取出 <code>then3</code> 执行输出 <code>“D”</code></p><blockquote><p>此时微任务队列为： <code>空</code><br>宏任务队列为：<code>setTimeout1，setTimeout2，setTimeout3</code></p></blockquote><p>到目前为止，当前loop的微任务对列为空，进入下一个loop，输出情况是<code>“第一轮” &gt; “C” &gt; “D”</code></p><p><strong>loop2:</strong><br><strong>第一步：</strong>在宏任务队列队首里取出一个任务执行，即<code>setTimeout1</code>执行输出<code>“第二轮”</code>，并<code>then1</code>进入微任务队列</p><blockquote><p>此时微任务队列为： <code>then1</code><br>宏任务队列为：<code>setTimeout2，setTimeout3</code></p></blockquote><p><strong>第二步：</strong>loop2 微任务队列不为空，则从微任务队列取出<code>then1</code>执行，输出<code>“A”</code></p><blockquote><p>此时微任务队列为： <code>空</code><br>宏任务队列为：<code>setTimeout2，setTimeout3</code></p></blockquote><p>到目前为止，当前loop的微任务对列为空，进入下一个loop，输出情况是<code>“第一轮” &gt; “C” &gt; “D” &gt; “第二轮” &gt; “A”</code></p><p><strong>loop3:</strong><br><strong>第一步：</strong>在宏任务队列队首里取出一个任务执行，即<code>setTimeout2</code>执行输出<code>“第三轮” &gt; “B”</code></p><blockquote><p>此时微任务队列为： <code>空</code><br>宏任务队列为：<code>setTimeout3</code></p></blockquote><p><strong>第二步：</strong>由于loop3 微任务队列为空，则直接进入下一轮loop，输出情况是<code>“第一轮” &gt; “C” &gt; “D” &gt; “第二轮” &gt; “A” &gt; “第三轮” &gt; “B”</code></p><p><strong>loop4:</strong><br><strong>第一步：</strong>在宏任务队列队首里取出一个任务执行，即<code>setTimeout3</code>执行输出<code>“第四轮” &gt; “E”</code></p><blockquote><p>此时微任务队列为： <code>空</code><br>宏任务队列为：<code>空</code></p></blockquote><p><strong>第二步：</strong>由于loop4 微任务队列为空，宏任务队列也为空，则此次Event Loop结束，最终输出情况是<code>“第一轮” &gt; “C” &gt; “D” &gt; “第二轮” &gt; “A” &gt; “第三轮” &gt; “B” &gt; “第四轮” &gt; “E”</code></p><p>上面的整个过程就是更为准确的Event Loop，下面还有个不同的例子供读者自行尝试</p><ul><li>宏任务里嵌套微任务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">console.log(&#39;第一轮&#39;);</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;第二轮&#39;);</span><br><span class="line">    Promise.resolve().then(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;A&#39;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&#39;第三轮&#39;);</span><br><span class="line">    console.log(&#39;B&#39;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">new Promise((resolve) &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;C&quot;)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(() &#x3D;&gt; &#123;                        &#x2F;&#x2F;注意，这个函数改动啦</span><br><span class="line">    setTimeout(() &#x3D;&gt; &#123;</span><br><span class="line">        console.log(&#39;第四轮&#39;);</span><br><span class="line">        console.log(&#39;E&#39;);</span><br><span class="line">        Promise.resolve().then(() &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&quot;D&quot;)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, 0);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>执行结果：<code>第一轮 &gt; C &gt; 第二轮 &gt; A &gt; 第三轮 &gt; B &gt; 第四轮 &gt; E &gt; D</code></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links:"></a>Links:</h2><p><a href="https://segmentfault.com/a/1190000012806637" target="_blank" rel="noopener">深入理解JS引擎的执行机制</a><br><a href="https://segmentfault.com/a/1190000011198232" target="_blank" rel="noopener">JavaScript 异步、栈、事件循环、任务队列</a><br><a href="http://www.cnblogs.com/MasterYao/p/5563725.html" target="_blank" rel="noopener">JavaScript 运行机制详解：深入理解Event Loop</a><br><a href="https://segmentfault.com/a/1190000011090605" target="_blank" rel="noopener">JavaScript：并发模型与Event Loop</a><br><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop［阮一峰］</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Event-Loop曾经的理解&quot;&gt;&lt;a href=&quot;#Event-Loop曾经的理解&quot; class=&quot;headerlink&quot; title=&quot;Event Loop曾经的理解&quot;&gt;&lt;/a&gt;Event Loop曾经的理解&lt;/h2&gt;&lt;p&gt;首先，JS是单线程语言，也就意味着同
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CSS帧动画、补间动画</title>
    <link href="https://stdim.github.io/2020/04/11/CSS%E5%B8%A7%E5%8A%A8%E7%94%BB%E3%80%81%E8%A1%A5%E9%97%B4%E5%8A%A8%E7%94%BB/"/>
    <id>https://stdim.github.io/2020/04/11/CSS%E5%B8%A7%E5%8A%A8%E7%94%BB%E3%80%81%E8%A1%A5%E9%97%B4%E5%8A%A8%E7%94%BB/</id>
    <published>2020-04-11T07:10:32.000Z</published>
    <updated>2020-04-11T07:10:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSS侦动画、补间动画"><a href="#CSS侦动画、补间动画" class="headerlink" title="CSS侦动画、补间动画"></a>CSS侦动画、补间动画</h1><h2 id="CSS侦动画、补间动画-1"><a href="#CSS侦动画、补间动画-1" class="headerlink" title="CSS侦动画、补间动画"></a>CSS侦动画、补间动画</h2><p><strong>关键侦动画和补间动画的区别</strong></p><p>关键侦动画就是需要自己完成动画的关键帧，需要知道动画的关键侦（包括起始和末尾），而补间动画则是只知道起始和末尾状态，对中间过渡进行补间的。 关键侦动画可以实现无限循环、动画反转等效果，而补间动画只能实现一次性的过渡效果。</p><p><strong>1. css侦动画</strong></p><p><em>CSS3 Animation 由三部分组成</em></p><ul><li>动画属性(properties) - 定义动画的播放时长，播放次数，以及用何种时间函数去播放动画等</li><li>关键帧(keyframes) - 定义动画在不同阶段的状态</li><li>css属性 - 就是css元素不同关键帧下的状态</li></ul><p><em>举个🌰，实现一个简单的圆呼吸效果</em></p><p>🤔首先定义动画属性，依次是： &gt; 动画名称、持续时间、时间函数、延迟时间、循环次数、是否轮流反向播放 ，animation: name duration timing-function delay iteration-count direction</p><p>⛽️接下来，定义keyframes</p><blockquote><p>@keyframes 名称</p></blockquote><p>😄最后，定义css变化属性</p><blockquote><p>0%(from) 属性 属性值</p></blockquote><blockquote><p>50% 属性 属性值</p></blockquote><blockquote><p>100%(to) 属性 属性值</p></blockquote><p><em>直接上代码</em></p><pre><code>.circle {  width: 50px;  height: 50px;  background: rgba(0, 0, 0, .5);  animation: breath-circle 2s ease-out 1s infinite;}@keyframes breath-circle {  0% { transform: scale(1); background: rgba(0, 0, 0, .5); }  25% { transform: scale(.9); background: rgba(0, 0, 0, .4); }  50% { transform: scale(.8); background: rgba(0, 0, 0, .3); }  75% { transform: scale(.9); background: rgba(0, 0, 0, .4); }  100% { transform: scale(1); background: rgba(0, 0, 0, .5); }}</code></pre><p><em>如果需要兼容浏览器，根据需要设置-webkit-这些前缀</em></p><p><strong>2. css补间动画</strong></p><p><em>补间动画我理解就是对transition属性的灵活运用</em></p><ul><li>transition 属性 时间函数 渐变时长 延迟时长</li></ul><p><em>举个🌰，实现一个从底部向上擦除的效果</em></p><p><em>代码撸起来 go go go…</em></p><pre><code>&lt;div class=&quot;box&quot;&gt;&lt;/div&gt;.box{  width: 100px;  height: 100px;  background: rgba(0, 0, 0, 0.7);  pointer-events: none;  mask: linear-gradient(to bottom, rgba(0, 0, 0, 1) 0%, rgba(0, 0, 0, 1) 100%) no-repeat center bottom;  mask-size: 100% 0%;  transition: mask-size ease-out 0.3s 0.3s;}// 在变化时添加box-go类，看看擦除效果.box-go{  pointer-events: auto;  mask-size: 100% 100%;}</code></pre><p><em>其实大多数情况下都是渐变transform属性，因为transform属性的渐变不会触发回流、重绘，不吃性能，所以建议用transform属性做渐变动画</em></p><p>不过说到回流、重绘，如果不提一提有点不够意思啦哈哈哈😂 欲知后事如何，且听下回分解</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSS侦动画、补间动画&quot;&gt;&lt;a href=&quot;#CSS侦动画、补间动画&quot; class=&quot;headerlink&quot; title=&quot;CSS侦动画、补间动画&quot;&gt;&lt;/a&gt;CSS侦动画、补间动画&lt;/h1&gt;&lt;h2 id=&quot;CSS侦动画、补间动画-1&quot;&gt;&lt;a href=&quot;#CSS侦
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
